/*  File:	RandomNumber.java  Author:Jordan Estrada  Date:	10/31  */package main.java;/**Class: RandomNumberDescription: generates pseudorandom numbers.*/public class RandomNumber {        private static final long MULTIPLIER = 16807;        private static final long MODULUS =  2147483647;        // Quotient of MODULUS / MULTIPLIER        private static final long QUOT = 127773;         // Remainder of MODULUS / MULTIPLIER        private static final long REM  = 2836;           /**         * The current seed of the generator.          */        private long currentSeed;                    /**        Method: RandomNumber        Inputs:n/a        Returns: n/a        Description: constructs and initializes a RandomNumber object      */        public RandomNumber() {                currentSeed = System.currentTimeMillis() % MODULUS;        }                    /**        Method: RandomNumber        Inputs: seed        Returns: n/a        Description:Constructs and initializes a RandomNumber object via a seed value.      */        public RandomNumber(long seed) {                currentSeed = Math.abs(seed) % MODULUS;        }                                /**         * Generates the next random number in the interval [0,1]         * @return The next random number in [0,1].         */        /**        Method: nextDoubleRand        Inputs:n/a        Returns: the next random number in [0,1] in a double      */        public double nextDoubleRand() {                long temp = MULTIPLIER*(currentSeed%QUOT) -                                 REM*(currentSeed/QUOT);                currentSeed = (temp > 0) ? temp : temp + MODULUS;                return (double) currentSeed / (double) MODULUS;        }                        /**        Method:next        Inputs:        Returns:        Description:      */        /**        Method: nextIntRand        Inputs: int lo & int hi         Returns: a random int value between provided min and max values      */        public int nextIntRand(int lo, int hi)                                 throws InvalidOperationException {                if (lo > hi)                        throw new InvalidOperationException(                                "invalid range: " + lo + " > " + hi);                return (int) (nextDoubleRand() * (hi - lo + 1)  + lo);        }}